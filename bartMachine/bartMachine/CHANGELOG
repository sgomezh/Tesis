v1.3.1
* Fixed prediction in classification due to an error in it.unimi.dsi.fastutil.ints.IntArrayList. I've traced the error down to two calls in the bartMachineTreeNode file that are clearly marked. We lost a tiny speedup there.
* Fixed concurrency error by synchronizing the MersenneTwister call. Hope this doesn't impact performance too much.
* Reenabled printing of tree illustrations for those who are crazy enough to use it. Good luck.

v1.3
* fastutil is now used instead of trove for supposedly a 2x speedup of many operations (see https://fastutil.di.unimi.it/) the downside being Java 8 is now required
* Mersenne Twister for randomness which is faster than Java's Random implementation

v1.2.7
* interaction constraints

v1.2.6
* raw node information extraction feature
* posterior mean / variance is now recorded and provided in the raw node information
* much more information is now returned in the pd_plot function for custom plotting, etc

v1.2.5.2
* interaction_investigator was fixed thanks to @bernicecu
* During building, when seed was set and num_cores > 1, a warning is fired saying that you won't get deterministic output (thanks to Dr. Michael H Schwartz).

v1.2.5.1
* Downgraded Java to v7 for Solaris-x86 platform compatibility (a CRAN requirement). 
* bartMachineJARs Java version was set to 5 (I checked all its JARs to make sure). No need to release an update there.
* During building, when seed was set, set.seed in R is no longer called (a call to set.seed is unexpected for the user and should only be done by the user consciously).

v1.2.5
* Major speedups to all places where data is passed from Java -> R
* A function that provides the observations in each node for all post-burn-in nodes. 
* Sample weight function to see how a prediction is being weighted by the original training data i.e. the approximate projection matrix H where yhatvec \approx H yvec. This function is not currently working properly without a kludge.
* Dependence on package "car" removed.

v1.2.4
* Prints message during classification indicating clearly the level of y = 1 to prevent user confusion
* As pertains to the above, added a verbose FLAG to predict that lets user know which level is y = 1 to prevent user confusion
* Compatibility with the data.table package
* Function "calc_prediction_intervals" returns all prediction samples
* Fixed Java version error (by making it a warning)

v1.2.3
* Fixed bug in label reversals

v1.2.2
* Created test of linearity convenience method
* Created bartMachine model array convenience constructor and predicts method
* Fixed inconsistent label bug: Y = 1 is now coded for the first element in levels(y). Thanks to Lars Kotthoff for pointing this out.
* Added warning message upon startup if less than 1GB RAM is allowed for bartMachine's java implementation
* Added benchmark datasets and fixed replication code for JSS paper
* Updated vignette and citation to reflect published paper in JSS 

v1.2.1
* Error message for pathological case with missing data
* Fix for datasets with missing data in some operating systems
* Fix for error checking function (normality test)
* Fix pd_plot function for missing data
* Fix error for sigsq estimate when there are variables consisting entirely of missing data
* More verbose messages for debugging intialization of bartMachine objects
* Ability to pass in an estimate of sigsq. This is important since this step may take a lot of time for datasets with a large number of features
* When creating partial dependence plots, there is now an option for proportion of data to use. The lower the proportion, the lower the resolution but the speedier the plot will generate.
* When creating partial dependence plots, there is now less duplication in the calculations which results in faster plotting.
* Decomped dependencies (the JARs) to package bartMachine JARs thanks to Kurt Hornik.

v1.2.0
* A major memory leak was fixed. bartMachine objects are also generated about 5% faster. Variable importance
  metrics are a tad slower as a result. Thanks to Matt Olson for pointing this out.

v1.1.2
* there is now a seed argument which sets the seed in both R and Java (especially useful for debugging). Only works
  when bartMachine is built with one core
* sigsq convergence plot now easier to read
* plot_y_vs_y_hat plot now easier to read and print in black & white
* pd_plot now has interval shaded for reading ease
* cov_prior_vec bug fixed

v1.1.1
* bartMachine now serializes models for transport in an image file (use serialize = TRUE option)
* bartMachine models are now cleaned up by R's garbage collection (destroy_bart_machine function is removed)
* rmse_by_num_trees no longer throws warnings
* k_fold_cv now has random splits and the y-hats and p-hats are returned
* jpackage is now used for initializing Java and thus "options(java.parameters = '...')" is used instead of set_bart_machine_memory which has been removed
* vignette and documentation are now revamped
* setting verbose flag set to FALSE eliminates Java output as well

v1.0.4
* fixed bug in confusion table creation in the pathological case when only one class is observed and predicted
* fixed small bug off-by-one bug in get_sigsqs function (thanks to Jeff Moser)
* Added Java source files to R package build. Declared authors of JARs which this library depends upon.

v1.0.3
* fixed bug in variable selection via cv where it used to crash if one variable was selected
* bartMachineCV now returns stats for each cross-validation run of hyperparameter sets 

v1.0.2
* worked around a rJava 0.9.5 issue that surfaces when setting RAM on some new MACs
* Upon initialization of the JVM there is now a message indicating how much maximum memory is available and a warning is thrown if the user attempts to reinitialize the RAM amount.
* Default JVM memory is now 1.1GB which is the maximum which initializes on 32-bit Windows machines
* Automobile data manual update
* Removed unnecessary verbosity during model construction
* Added a convenience alias method for setting memory
* Added a convenience alias method for building bart machines and building cross-validated bart machines
* Bugs fixed in k_fold_cv function
* Bug fixed in handling of missing data in the absence of missing data
* Prediction intervals now technically correct
* During covariance importance test, covariates are all permuted as a block unit to preserve collinearity structure
* Automatic cov_importance_prior construction by downweighting factors by their number of levels
* Added benchmark datasets
* Bugs fixed during specification of Xy dataframe instead of X, y separately
* Bugs fixed when using bartMachineCV on a numeric x
* Various improvements to printed messages during runtime

v1.0.1
* Updated vignette to load from R
* Better verbose messages in R

v1.0
* Initial Release